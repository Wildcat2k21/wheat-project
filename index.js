// –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import express from 'express';
import cookieParser from 'cookie-parser';
import multer from 'multer';
import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';
import { customAlphabet } from 'nanoid';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
import {
    databaseConfig,
    profileIconsPath,
    pdfDocsPath,
    nanoIdAlphabet,
    temporaryFilesPath 
} from './modules/contants.js';

// –°—É—â–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞–º–∏
import Report from './modules/database/entities/report.js';
import Profile from './modules/database/entities/profile.js';

// –ü—Ä–æ–≤–µ—Ä–∫–∏ middleware
import {
    cookiesMiddleware,
    cookiesMiddlewareAPI
} from './modules/middlewares/index.js';

// –ü–æ–º–æ—â–Ω–∏–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
import {
    createQueryMessageString,
    reportFieldsFilter,
    paginationFixer
} from './modules/helpers/index.js';

// –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–æ–≤
import {
    checkLoginInputs,
    checkNewProfileInputs,
    checkReportInputs 
} from './modules/inputs_checkers/index.js';

//–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const APP_PORT = process.env.PORT || 3000;

const nanoid = customAlphabet(nanoIdAlphabet, 8);

//–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dotenv.config();

//–¥–æ–±–∞–≤–ª—è–µ–º middlewares
const app = express();
const apiRouter = express.Router();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
const upload = multer({
    dest: temporaryFilesPath,
    limits: { fileSize: 10 * 1024 * 1024 } //–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ 10–ú–ë
}); 

//–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));
apiRouter.use('/profile_icons', express.static('profile_icons'));
apiRouter.use('/docs', express.static('pdf_docs'));

//–ø–æ–¥–∫–ª—é—á–∞–µ–º middlewares
apiRouter.use(cookieParser());
apiRouter.use(express.json({limit: '2mb'}));
apiRouter.use(express.urlencoded({ extended: true }));

//–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã login.html
apiRouter.post('/login', async (req, res) => {
    const formData = req.body;

    //–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
    if(!checkLoginInputs(formData)){
        const message = createQueryMessageString('–û—à–∏–±–∫–∞', '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
        return res.status(400).redirect(`/pages/login.html?${message}`);
    }

    const profile = new Profile(databaseConfig);

    try{
        const profileData = await profile.select([], formData);

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏ –≤–µ—Ä–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
        if(!profileData.length || profileData[0].password !== formData.password){
            const message = createQueryMessageString('–û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            return res.status(400).redirect(`/pages/login.html?${message}`);
        }

        //–∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        res.cookie('auth-cookie', `${formData.login};${formData.password}`, {
            httpOnly: true,       // –ü—Ä–∏ true –±—Ä–∞—É–∑–µ—Ä –Ω–µ –¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ cookie —á–µ—Ä–µ–∑ JS
            secure: false,        // –ü—Ä–∏ true —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS (—É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ)
            sameSite: 'Lax',      // –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É–∫–∏ —Å —Ç–µ–º –∂–µ —Å–∞–π—Ç–æ–º
            maxAge: 3600000       // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ 1 —á–∞—Å
        });

        //–∫—É–∫–∏ uid –ø—Ä–æ—Ñ–∏–ª—è
        res.cookie('profile-uid', profileData[0].uid, {
            httpOnly: false,      // –ü—Ä–∏ true –±—Ä–∞—É–∑–µ—Ä –Ω–µ –¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ cookie —á–µ—Ä–µ–∑ JS
            secure: false,        // –ü—Ä–∏ true —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS (—É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ)
            sameSite: 'Lax',      // –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É–∫–∏ —Å —Ç–µ–º –∂–µ —Å–∞–π—Ç–æ–º
            maxAge: 3600000       // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ 1 —á–∞—Å
        });

        const message = createQueryMessageString('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É', `–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å, ${ profileData[0].fullname}.\n–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏"`);
        res.status(200).redirect(`/index.html?${message}`);
    }
    catch(err){
        console.error(err);
        const errorMessage = createQueryMessageString('–û—à–∏–±–∫–∞', '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
        res.status(500).redirect(`/pages/login.html?${errorMessage}`);
    }
    //–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    finally{
        await profile.closePool();
    }
});

//–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã newprofile.html
apiRouter.post('/profile', upload.single('profile-img'), async (req, res) => {
    const formData = req.body;

    //–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
    if(!checkNewProfileInputs(formData)){
        const message = createQueryMessageString('–û—à–∏–±–∫–∞', '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
        return res.status(400).redirect(`/pages/newprofile.html?${message}`);
    }

    //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è
    if(!req.file){
        const message = createQueryMessageString('–û—à–∏–±–∫–∞', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω–æ');
        return res.status(400).redirect(`/pages/newprofile.html?${message}`);
    }

    //–∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–Ω–æ—Å—Ç—å—é profile –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ pool
    const profile = new Profile(databaseConfig);

    try {
        const userWithSameLogin = await profile.select([], { login: formData.login });

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        if(userWithSameLogin.length){
            const message = createQueryMessageString('–û—à–∏–±–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            return res.status(400).redirect(`/pages/newprofile.html?${message}`);
        }

        //—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è
        let profile_uid, sameProfileUid;

        //–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π uid –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π
        do {
            profile_uid = nanoid(8);
            sameProfileUid = await profile.select([], { uid: profile_uid });
        } while (sameProfileUid.length > 0);

        //–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const tempPath = req.file.path;
        const filename = `${profile_uid}.png`;
        const outputPath = path.join(profileIconsPath, filename);

        formData.uid = profile_uid;

        //–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await sharp(tempPath)
            .resize(126, 126)
            .toFile(outputPath);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        await fs.promises.unlink(tempPath);

        //–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ profile
        await profile.create(formData);

        //–∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        res.cookie('auth-cookie', `${formData.login};${formData.password}`, {
            httpOnly: true,       // –ü—Ä–∏ true –±—Ä–∞—É–∑–µ—Ä –Ω–µ –¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ cookie —á–µ—Ä–µ–∑ JS
            secure: false,        // –ü—Ä–∏ true —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS (—É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ)
            sameSite: 'Lax',      // –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É–∫–∏ —Å —Ç–µ–º –∂–µ —Å–∞–π—Ç–æ–º
            maxAge: 3600000       // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ 1 —á–∞—Å
        });

        //–∫—É–∫–∏ uid –ø—Ä–æ—Ñ–∏–ª—è
        res.cookie('profile-uid', profile_uid, {
            httpOnly: false,      // –ü—Ä–∏ true –±—Ä–∞—É–∑–µ—Ä –Ω–µ –¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ cookie —á–µ—Ä–µ–∑ JS
            secure: false,        // –ü—Ä–∏ true —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS (—É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ)
            sameSite: 'Lax',      // –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É–∫–∏ —Å —Ç–µ–º –∂–µ —Å–∞–π—Ç–æ–º
            maxAge: 3600000       // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ 1 —á–∞—Å
        });

        //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞
        const message = createQueryMessageString('–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ‚úîÔ∏è', `–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å, ${formData.fullname}.\n–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏"`);
        res.status(200).redirect(`/index.html?${message}`);
    }
    //–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    catch (err) {
        console.error(err);
        const errorMessage = createQueryMessageString('–û—à–∏–±–∫–∞', '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
        res.status(500).redirect(`/pages/newprofile.html?${errorMessage}`);
    }
    //–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    finally{
        await profile.closePool();
    }
});

//–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã reports.html
apiRouter.post('/report', cookiesMiddleware, upload.single('pdf-file'), async (req, res) => {
    const formData = req.body;
    const report = new Report(databaseConfig);

    try{
        //–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞
        if(!checkReportInputs(formData)){
            const message = createQueryMessageString('–û—à–∏–±–∫–∞', '–ù–µ –≤—Å–µ –ø–æ–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
            return res.status(400).redirect(`/pages/reports.html?${message}`);
        }

        //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
        if(!req.file){
            const message = createQueryMessageString('–û—à–∏–±–∫–∞', '–§–∞–π–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω');
            return res.status(400).redirect(`/pages/reports.html?${message}`);
        }

        const login = decodeURIComponent(req.cookies['auth-cookie']).split(';')[0];

        const {insertId} = await report.create({...formData, profile_login: login});

        //–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const tempPath = req.file.path;
        const filename = `report_${insertId}.pdf`;
        const outputPath = path.join(pdfDocsPath, filename);

        //–°–æ—Ö—Ä–∞–Ω—è–µ–º pdf —Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º temp –≤ output
        await fs.promises.rename(tempPath, outputPath);

        const message = createQueryMessageString('–£—Å–ø–µ—à–Ω–æ üéâ', `–ü—É–±–ª–∏–∫–∞—Ü–∏—è "${formData.title}" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
        res.status(200).redirect(`/pages/reports.html?${message}`);
    }
    catch(err){
        console.error(err);
        const errorMessage = createQueryMessageString('–û—à–∏–±–∫–∞', '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
        res.status(500).redirect(`/pages/reports.html?${errorMessage}`);
    }
    finally{
        await report.closePool();
    }
});

//–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã reports.html
apiRouter.get('/reports', cookiesMiddlewareAPI,  async (req, res) => {
    const {_page, _limit} = req.query;
    const report = new Report(databaseConfig);

    try{
        const totalItems = await report.count();
        const [page, limit, totalPages] = paginationFixer(totalItems, _page, _limit);
        const offset = (page - 1) * limit;
    
        const profileJoinTable = [{
            name: 'profile',
            pKey: 'login',
            referencedKey: 'profile_login'
        }]
    
        const profileReports = await report.paginationSelect([], {}, profileJoinTable, limit, offset);
        const reportList = profileReports.map(reportItem => reportFieldsFilter(reportItem));
        res.status(200).json({ reportList, totalPages, limit, page });
    }
    catch(err){
        console.error(err);
        return res.status(500).json({title: '–û—à–∏–±–∫–∞', message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'});
    }
    finally{
        await report.closePool();
    }
});

//–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ report.html
apiRouter.get('/reports/:id', cookiesMiddlewareAPI, async (req, res) => {
    const report = new Report(databaseConfig);
    const reportId = parseInt(req.params.id, 10);

    try{
        if(isNaN(reportId) || reportId <= 0){
            const errorMessage = createQueryMessageString('üê¶‚Äç‚¨õ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', '–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return res.status(404).json({redirect: `/pages/notfound.html?${errorMessage}`});
        }

        const profileJoinTable = [{
            name: 'profile',
            pKey: 'login',
            referencedKey: 'profile_login'
        }]

        const reportItem = await report.select([], { id: reportId }, profileJoinTable);

        if(!reportItem.length){
            const errorMessage = createQueryMessageString('üê¶‚Äç‚¨õ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', '–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return res.status(404).json({redirect: `/pages/notfound.html?${errorMessage}`});
        }

        const reportFields = reportFieldsFilter(reportItem[0]);
        reportFields.pdf_link = `/api/docs/report_${reportId}.pdf`;
        res.status(200).json(reportFields);
    }
    catch(err){
        console.error(err);
        return res.status(500).json({title: '–û—à–∏–±–∫–∞', message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'});
    }
    finally{
        await report.closePool();
    }
});

//–∏—Å–ø–æ–ª—å–∑—É–µ–º api router
app.use('/api', apiRouter);

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ middleware
app.use((err, req, res, next) => {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º `pathname` –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let pathname = '/index.html';
    const referer = req.get('Referer');

    //–ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (referer) {
        try {
            pathname = new URL(referer).pathname;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Referer:', error);
        }
    }

    //—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä
    if(err?.code === 'LIMIT_FILE_SIZE'){
        const errorMessage = createQueryMessageString('üê¶‚Äç‚¨õ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä');
        return res.status(413).redirect(`${pathname}?${errorMessage}`);
    }

    // –í –æ–±—â–µ–º —ç—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç fetch post –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    // –û–¥–Ω–∞–∫–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –≤ –±—É–¥—É—â–µ–º –∏–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ body json –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤ app.use(express.json({limit: '2mb'}));
    if (err?.type === 'entity.too.large') {
        return res.status(413).json({title: 'üê¶‚Äç‚¨õ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', message: '–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π'});
    }

    // 400: –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (err?.status === 400 || err?.name === 'ValidationError') {
        const errorMessage = createQueryMessageString('üê¶‚Äç‚¨õ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return res.status(400).redirect(`${pathname}?${errorMessage}`);
    }
    
    //–¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    const errorMessage = createQueryMessageString('üê¶‚Äç‚¨õ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    return res.status(500).redirect(`${pathname}?${errorMessage}`);
});

// Middleware 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use((req, res) => {
    res.status(404).redirect('/pages/notfound.html');
});

//–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(APP_PORT, () => {
    console.log('Server started on port http://localhost:3000');
});